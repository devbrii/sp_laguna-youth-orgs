// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//! LAGUNA YOUTH ORGS HUB SCHEMA
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    Account Account[]
    Session Session[]
    Post    Post[]

    // Youth Hub Attr
    role         ROLE          @default(GUEST)
    organization Organization?
    volunteer    Volunteer?
}

model Organization {
    id String @id @default(cuid())

    orgName     String
    phoneNumber String @unique
    bio         String

    mission    String
    vision     String
    objectives String

    event                  Event[]
    activities             Activity[]
    centersOfParticipation CentersOfParticipation?
    speakers               Speakers[]

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    // ! Many to Many Relations
    VolJoinOrg VolJoinOrg[]

    OrgSponsored            OrgSponsorOrg[] @relation(name: "AcceptingOrganization")
    OrgRequestedSponsorship OrgSponsorOrg[] @relation(name: "RequestingOrganization")

    email String @unique

    partneredOrganizations ActivityCall[] // list of organizations who applied for partnership
}

model Volunteer {
    id            String  @id @default(cuid())
    firstName     String
    lastName      String
    middleInitial String?
    suffix        String?
    phoneNumber   String  @unique
    bio           String?

    sex String?
    age Int?

    user   User?   @relation(fields: [userId], references: [id])
    userId String? @unique

    email String @unique

    VolJoinOrg    VolJoinOrg[]
    activityCalls ActivityCall[]

    centersTags String[]
    customTags  String[]
    setTags     Boolean  @default(false)
}

model Guest {
    id          String @id @default(cuid())
    name        String
    email       String
    sex         String
    phoneNumber String
    age         Int

    activityCalls  ActivityCall?
    activityCallId String?       @unique
}

model Event {
    id          String   @id @default(cuid())
    name        String
    createdAt   DateTime
    organizedBy String
    partners    String[]
    details     String
    location    String
    date        DateTime

    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    images String[]
}

model Activity {
    id        String   @id @default(cuid())
    name      String
    details   String
    date      DateTime
    createdAt DateTime @default(now())
    location  String
    images    String[]

    hasOrganizations Boolean
    hasVolunteers    Boolean
    hasParticipants  Boolean

    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    activityCalls ActivityCall[]
    centersTags   String[]
    customTags    String[]
}

model CentersOfParticipation {
    id                  String @id @default(cuid())
    health              String
    education           String
    economicEmpowerment String
    socialInclusion     String
    peaceBuilding       String
    governance          String
    activeCitizenship   String
    environment         String
    globalMobility      String
    agriculture         String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String       @unique
}

model Speakers {
    id        String   @id @default(cuid())
    name      String
    age       Int
    email     String
    bio       String
    createdAt DateTime @default(now())

    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
}

// ! MANY TO MANY RELATIONS
model VolJoinOrg {
    id             String       @id @default(cuid())
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
    volunteer      Volunteer    @relation(fields: [volunteerId], references: [id])
    volunteerId    String

    subject String
    body    String

    status String @default("PENDING")

    @@unique([organizationId, volunteerId])
}

model OrgSponsorOrg {
    id String @id @default(cuid())

    organizationRequesting   Organization @relation(name: "RequestingOrganization", fields: [organizationIdRequesting], references: [id])
    organizationIdRequesting String

    organizationAccepting   Organization @relation(name: "AcceptingOrganization", fields: [organizationIdAccepting], references: [id])
    organizationIdAccepting String

    subject String
    body    String

    status String @default("PENDING")

    // @@unique([organizationIdRequesting, organizationIdAccepting])
}

model ActivityCall {
    id String @id @default(cuid())

    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    activityId String

    organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?

    volunteer   Volunteer? @relation(fields: [volunteerId], references: [id])
    volunteerId String?

    guest   Guest?  @relation(fields: [guestId], references: [id])
    guestId String? @unique

    status String
    label  String

    body    String?
    subject String?

    @@unique([activityId, organizationId])
    @@unique([activityId, volunteerId])
    @@unique([activityId, guestId])
}

// ! Enums
enum ROLE {
    GUEST
    ORGANIZATION
    VOLUNTEER
}

enum STATUS {
    PENDING
    APPROVED
}
